-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sqrt_CORDIC is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    returnValue_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    returnValue_full_n : IN STD_LOGIC;
    returnValue_write : OUT STD_LOGIC );
end;


architecture behav of sqrt_CORDIC is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sqrt_CORDIC,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu19eg-ffve1924-3-e-es2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.653200,HLS_SYN_LAT=2007001,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=719,HLS_SYN_LUT=1049}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv47_0 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_E8 : STD_LOGIC_VECTOR (7 downto 0) := "11101000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal returnValue_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_1_fu_80_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_154 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal input_in_V_fu_90_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal input_in_V_reg_159 : STD_LOGIC_VECTOR (47 downto 0);
    signal exitcond_fu_74_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cordic_base_fu_66_ap_return : STD_LOGIC_VECTOR (24 downto 0);
    signal output_out_V_reg_164 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_cordic_base_fu_66_ap_done : STD_LOGIC;
    signal tmp_3_fu_99_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_169 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal res_V_1_fu_109_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_V_1_reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exp_V_reg_184 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_cordic_base_fu_66_ap_start : STD_LOGIC;
    signal grp_cordic_base_fu_66_ap_idle : STD_LOGIC;
    signal grp_cordic_base_fu_66_ap_ready : STD_LOGIC;
    signal i_reg_55 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_grp_cordic_base_fu_66_ap_start : STD_LOGIC := '0';
    signal grp_fu_71_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_86_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_71_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exp_V_2_fu_123_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_128_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal dp_fu_139_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component cordic_base IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inputData_in_V_read : IN STD_LOGIC_VECTOR (47 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component sqrt_CORDIC_uitofbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_cordic_base_fu_66 : component cordic_base
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cordic_base_fu_66_ap_start,
        ap_done => grp_cordic_base_fu_66_ap_done,
        ap_idle => grp_cordic_base_fu_66_ap_idle,
        ap_ready => grp_cordic_base_fu_66_ap_ready,
        inputData_in_V_read => input_in_V_reg_159,
        ap_return => grp_cordic_base_fu_66_ap_return);

    sqrt_CORDIC_uitofbkb_U2 : component sqrt_CORDIC_uitofbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_71_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_71_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_cordic_base_fu_66_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_cordic_base_fu_66_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_74_p2 = ap_const_lv1_0))) then 
                    ap_reg_grp_cordic_base_fu_66_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_cordic_base_fu_66_ap_ready)) then 
                    ap_reg_grp_cordic_base_fu_66_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_55_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (returnValue_full_n = ap_const_logic_1))) then 
                i_reg_55 <= i_1_reg_154;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_55 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp_3_reg_169) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                exp_V_reg_184 <= res_V_1_fu_109_p1(30 downto 23);
                res_V_1_reg_179 <= res_V_1_fu_109_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_154 <= i_1_fu_80_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_74_p2 = ap_const_lv1_0))) then
                    input_in_V_reg_159(47) <= input_in_V_fu_90_p3(47);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_cordic_base_fu_66_ap_done = ap_const_logic_1))) then
                output_out_V_reg_164 <= grp_cordic_base_fu_66_ap_return;
                tmp_3_reg_169 <= tmp_3_fu_99_p2;
            end if;
        end if;
    end process;
    input_in_V_reg_159(46 downto 0) <= "00000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, returnValue_full_n, ap_CS_fsm_state6, ap_CS_fsm_state2, exitcond_fu_74_p2, ap_CS_fsm_state3, grp_cordic_base_fu_66_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_74_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_cordic_base_fu_66_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (returnValue_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_74_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_74_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_74_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_74_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dp_fu_139_p1 <= p_Result_s_fu_128_p5;
    exitcond_fu_74_p2 <= "1" when (i_reg_55 = ap_const_lv10_3E8) else "0";
    exp_V_2_fu_123_p2 <= std_logic_vector(signed(ap_const_lv8_E8) + signed(exp_V_reg_184));
    grp_cordic_base_fu_66_ap_start <= ap_reg_grp_cordic_base_fu_66_ap_start;
    grp_fu_71_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_out_V_reg_164),32));
    i_1_fu_80_p2 <= std_logic_vector(unsigned(i_reg_55) + unsigned(ap_const_lv10_1));
    input_in_V_fu_90_p3 <= (tmp_fu_86_p1 & ap_const_lv47_0);
    p_Result_s_fu_128_p5 <= (res_V_1_reg_179(31 downto 31) & exp_V_2_fu_123_p2 & res_V_1_reg_179(22 downto 0));
    res_V_1_fu_109_p1 <= grp_fu_71_p1;

    returnValue_blk_n_assign_proc : process(returnValue_full_n, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            returnValue_blk_n <= returnValue_full_n;
        else 
            returnValue_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    returnValue_din <= 
        ap_const_lv32_0 when (tmp_3_reg_169(0) = '1') else 
        dp_fu_139_p1;

    returnValue_write_assign_proc : process(returnValue_full_n, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (returnValue_full_n = ap_const_logic_1))) then 
            returnValue_write <= ap_const_logic_1;
        else 
            returnValue_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_fu_99_p2 <= "1" when (grp_cordic_base_fu_66_ap_return = ap_const_lv25_0) else "0";
    tmp_fu_86_p1 <= i_1_fu_80_p2(1 - 1 downto 0);
end behav;
