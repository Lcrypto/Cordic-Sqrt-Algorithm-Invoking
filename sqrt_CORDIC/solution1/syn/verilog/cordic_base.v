// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cordic_base (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inputData_in_V_read,
        ap_return
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [47:0] inputData_in_V_read;
output  [24:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[24:0] ap_return;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] bit_fu_290_p2;
wire    ap_CS_fsm_state2;
reg   [47:0] p_Result_s_fu_307_p4;
wire   [0:0] exitcond_i3_fu_284_p2;
wire   [5:0] i_fu_327_p2;
wire    ap_CS_fsm_state3;
wire   [49:0] p_050_6_i_fu_427_p3;
wire   [0:0] exitcond_i_fu_321_p2;
reg   [49:0] p_Result_12_fu_482_p4;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_11_fu_452_p3;
wire   [5:0] j_fu_492_p2;
wire   [49:0] p_Result_13_fu_542_p5;
reg   [49:0] p_Result_13_reg_791;
wire   [5:0] j_1_fu_598_p2;
wire    ap_CS_fsm_state6;
wire   [0:0] tmp_19_fu_558_p3;
wire   [49:0] rem_next_V_fu_609_p2;
reg   [49:0] rem_next_V_reg_805;
reg   [24:0] p_Result_15_fu_648_p4;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_22_fu_618_p3;
wire   [5:0] j_2_fu_658_p2;
reg   [24:0] sqrt_int_V_fu_677_p4;
wire   [49:0] p_0289_2_i_fu_687_p3;
wire   [5:0] i_2_fu_693_p2;
wire   [4:0] bit_1_fu_709_p2;
wire    ap_CS_fsm_state8;
reg   [24:0] p_Result_4_fu_727_p4;
wire   [0:0] exitcond_i6_fu_703_p2;
reg   [47:0] x_in_V_reg_120;
reg   [5:0] bvh_d_index_reg_132;
reg   [49:0] p_Val2_s_reg_143;
reg   [5:0] i1_0_i_reg_155;
reg   [24:0] data_x_outp_V_reg_166;
reg   [49:0] p_0289_0_i_reg_178;
reg   [5:0] i2_0_i_reg_190;
reg   [49:0] p_Val2_3_reg_202;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_10_fu_440_p3;
reg   [5:0] bvh_d_index_4_reg_212;
reg   [5:0] bvh_d_index_9_reg_223;
reg   [24:0] p_Val2_6_reg_234;
reg   [5:0] bvh_d_index_11_reg_244;
reg   [24:0] p_Val2_7_reg_255;
reg   [4:0] bvh_d_index_6_reg_266;
reg   [49:0] p_Val2_4_fu_110;
reg   [49:0] p_Result_14_fu_588_p4;
wire   [31:0] index_assign_11_cast_fu_280_p1;
wire   [0:0] tmp_2_fu_296_p3;
wire   [63:0] p_Repl2_4_fu_303_p1;
wire   [5:0] bvh_d_index_1_fu_355_p2;
wire   [6:0] i1_0_i_cast_fu_317_p1;
wire   [6:0] bvh_d_index_2_fu_365_p2;
wire  signed [31:0] index_assign_12_cast_fu_371_p1;
wire   [0:0] tmp_7_fu_375_p3;
wire   [31:0] index_assign_cast_fu_361_p1;
wire   [63:0] p_Repl2_s_fu_383_p1;
wire   [0:0] tmp_fu_333_p2;
reg   [49:0] p_Result_9_fu_339_p4;
reg   [49:0] p_Result_11_fu_397_p4;
wire   [0:0] tmp_1_fu_349_p2;
wire   [0:0] sel_tmp1_fu_415_p2;
wire   [0:0] sel_tmp2_fu_421_p2;
reg   [49:0] p_Result_10_fu_387_p4;
wire   [49:0] sel_tmp_fu_407_p3;
wire   [5:0] bvh_d_index_3_fu_460_p2;
wire  signed [31:0] index_assign_14_cast_fu_448_p1;
wire   [0:0] tmp_17_fu_470_p3;
wire   [31:0] index_assign_13_cast_fu_466_p1;
wire   [63:0] p_Repl2_1_fu_478_p1;
wire   [5:0] bvh_d_index_7_fu_498_p2;
wire   [5:0] bvh_d_index_5_fu_508_p2;
wire   [31:0] index_assign_15_cast_fu_514_p1;
wire   [31:0] index_assign_16_cast_fu_504_p1;
wire   [0:0] tmp_15_fu_518_p3;
wire   [0:0] tmp_16_fu_526_p3;
wire   [1:0] tmp_6_fu_534_p3;
wire   [5:0] bvh_d_index_8_fu_566_p2;
wire  signed [31:0] index_assign_18_cast_fu_554_p1;
wire   [0:0] tmp_20_fu_576_p3;
wire   [31:0] index_assign_17_cast_fu_572_p1;
wire   [63:0] p_Repl2_2_fu_584_p1;
wire   [5:0] bvh_d_index_10_fu_626_p2;
wire  signed [31:0] index_assign_20_cast_fu_614_p1;
wire   [0:0] tmp_25_fu_636_p3;
wire   [31:0] index_assign_19_cast_fu_632_p1;
wire   [63:0] p_Repl2_3_fu_644_p1;
wire   [0:0] tmp_23_fu_664_p3;
wire   [0:0] not_Result_s_fu_671_p2;
wire   [31:0] index_assign_21_cast_fu_699_p1;
wire   [0:0] tmp_12_fu_715_p3;
wire   [63:0] p_Repl2_5_fu_723_p1;
reg   [24:0] ap_return_preg;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_return_preg = 25'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 25'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond_i6_fu_703_p2))) begin
            ap_return_preg <= p_Val2_7_reg_255;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_22_fu_618_p3))) begin
        bvh_d_index_11_reg_244 <= j_2_fu_658_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_19_fu_558_p3))) begin
        bvh_d_index_11_reg_244 <= 6'd23;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == tmp_11_fu_452_p3))) begin
        bvh_d_index_4_reg_212 <= j_fu_492_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == tmp_10_fu_440_p3))) begin
        bvh_d_index_4_reg_212 <= 6'd23;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_10_fu_440_p3))) begin
        bvh_d_index_6_reg_266 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond_i6_fu_703_p2))) begin
        bvh_d_index_6_reg_266 <= bit_1_fu_709_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_19_fu_558_p3))) begin
        bvh_d_index_9_reg_223 <= j_1_fu_598_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (tmp_11_fu_452_p3 == 1'd1))) begin
        bvh_d_index_9_reg_223 <= 6'd22;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_i3_fu_284_p2 == 1'd0))) begin
        bvh_d_index_reg_132 <= bit_fu_290_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bvh_d_index_reg_132 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_i_fu_321_p2 == 1'd1))) begin
        data_x_outp_V_reg_166 <= 25'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == tmp_22_fu_618_p3))) begin
        data_x_outp_V_reg_166 <= sqrt_int_V_fu_677_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_i3_fu_284_p2 == 1'd1))) begin
        i1_0_i_reg_155 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond_i_fu_321_p2))) begin
        i1_0_i_reg_155 <= i_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_i_fu_321_p2 == 1'd1))) begin
        i2_0_i_reg_190 <= 6'd24;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == tmp_22_fu_618_p3))) begin
        i2_0_i_reg_190 <= i_2_fu_693_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_i_fu_321_p2 == 1'd1))) begin
        p_0289_0_i_reg_178 <= 50'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == tmp_22_fu_618_p3))) begin
        p_0289_0_i_reg_178 <= p_0289_2_i_fu_687_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == tmp_11_fu_452_p3))) begin
        p_Val2_3_reg_202 <= p_Result_12_fu_482_p4;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == tmp_10_fu_440_p3))) begin
        p_Val2_3_reg_202 <= p_0289_0_i_reg_178;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_19_fu_558_p3))) begin
        p_Val2_4_fu_110 <= p_Result_14_fu_588_p4;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond_i_fu_321_p2 == 1'd1))) begin
        p_Val2_4_fu_110 <= 50'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_22_fu_618_p3))) begin
        p_Val2_6_reg_234 <= p_Result_15_fu_648_p4;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_19_fu_558_p3))) begin
        p_Val2_6_reg_234 <= data_x_outp_V_reg_166;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_11_fu_452_p3 == 1'd1))) begin
        p_Result_13_reg_791 <= p_Result_13_fu_542_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond_i6_fu_703_p2))) begin
        p_Val2_7_reg_255 <= p_Result_4_fu_727_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond_i_fu_321_p2))) begin
        p_Val2_s_reg_143 <= p_050_6_i_fu_427_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_19_fu_558_p3))) begin
        rem_next_V_reg_805 <= rem_next_V_fu_609_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_i3_fu_284_p2 == 1'd0))) begin
        x_in_V_reg_120 <= p_Result_s_fu_307_p4;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond_i6_fu_703_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond_i6_fu_703_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond_i6_fu_703_p2))) begin
        ap_return = p_Val2_7_reg_255;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond_i3_fu_284_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_i_fu_321_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_10_fu_440_p3))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (tmp_11_fu_452_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_19_fu_558_p3))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == tmp_22_fu_618_p3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond_i6_fu_703_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bit_1_fu_709_p2 = (bvh_d_index_6_reg_266 + 5'd1);

assign bit_fu_290_p2 = (bvh_d_index_reg_132 + 6'd1);

assign bvh_d_index_10_fu_626_p2 = (bvh_d_index_11_reg_244 + 6'd1);

assign bvh_d_index_1_fu_355_p2 = ($signed(6'd49) - $signed(i1_0_i_reg_155));

assign bvh_d_index_2_fu_365_p2 = (7'd48 - i1_0_i_cast_fu_317_p1);

assign bvh_d_index_3_fu_460_p2 = (bvh_d_index_4_reg_212 + 6'd2);

assign bvh_d_index_5_fu_508_p2 = (bvh_d_index_7_fu_498_p2 | 6'd1);

assign bvh_d_index_7_fu_498_p2 = i2_0_i_reg_190 << 6'd1;

assign bvh_d_index_8_fu_566_p2 = (bvh_d_index_9_reg_223 + 6'd2);

assign exitcond_i3_fu_284_p2 = ((bvh_d_index_reg_132 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond_i6_fu_703_p2 = ((bvh_d_index_6_reg_266 == 5'd25) ? 1'b1 : 1'b0);

assign exitcond_i_fu_321_p2 = ((i1_0_i_reg_155 == 6'd50) ? 1'b1 : 1'b0);

assign i1_0_i_cast_fu_317_p1 = i1_0_i_reg_155;

assign i_2_fu_693_p2 = ($signed(i2_0_i_reg_190) + $signed(6'd63));

assign i_fu_327_p2 = (i1_0_i_reg_155 + 6'd1);

assign index_assign_11_cast_fu_280_p1 = bvh_d_index_reg_132;

assign index_assign_12_cast_fu_371_p1 = $signed(bvh_d_index_2_fu_365_p2);

assign index_assign_13_cast_fu_466_p1 = bvh_d_index_3_fu_460_p2;

assign index_assign_14_cast_fu_448_p1 = $signed(bvh_d_index_4_reg_212);

assign index_assign_15_cast_fu_514_p1 = bvh_d_index_5_fu_508_p2;

assign index_assign_16_cast_fu_504_p1 = bvh_d_index_7_fu_498_p2;

assign index_assign_17_cast_fu_572_p1 = bvh_d_index_8_fu_566_p2;

assign index_assign_18_cast_fu_554_p1 = $signed(bvh_d_index_9_reg_223);

assign index_assign_19_cast_fu_632_p1 = bvh_d_index_10_fu_626_p2;

assign index_assign_20_cast_fu_614_p1 = $signed(bvh_d_index_11_reg_244);

assign index_assign_21_cast_fu_699_p1 = bvh_d_index_6_reg_266;

assign index_assign_cast_fu_361_p1 = bvh_d_index_1_fu_355_p2;

assign j_1_fu_598_p2 = ($signed(bvh_d_index_9_reg_223) + $signed(6'd63));

assign j_2_fu_658_p2 = ($signed(bvh_d_index_11_reg_244) + $signed(6'd63));

assign j_fu_492_p2 = ($signed(bvh_d_index_4_reg_212) + $signed(6'd63));

assign not_Result_s_fu_671_p2 = (tmp_23_fu_664_p3 ^ 1'd1);

assign p_0289_2_i_fu_687_p3 = ((tmp_23_fu_664_p3[0:0] === 1'b1) ? p_Result_13_reg_791 : rem_next_V_reg_805);

assign p_050_6_i_fu_427_p3 = ((sel_tmp2_fu_421_p2[0:0] === 1'b1) ? p_Result_10_fu_387_p4 : sel_tmp_fu_407_p3);

assign p_Repl2_1_fu_478_p1 = tmp_17_fu_470_p3;

assign p_Repl2_2_fu_584_p1 = tmp_20_fu_576_p3;

assign p_Repl2_3_fu_644_p1 = tmp_25_fu_636_p3;

assign p_Repl2_4_fu_303_p1 = tmp_2_fu_296_p3;

assign p_Repl2_5_fu_723_p1 = tmp_12_fu_715_p3;

assign p_Repl2_s_fu_383_p1 = tmp_7_fu_375_p3;

always @ (*) begin
    p_Result_10_fu_387_p4 = p_Val2_s_reg_143;
    p_Result_10_fu_387_p4[index_assign_cast_fu_361_p1] = |(p_Repl2_s_fu_383_p1);
end

always @ (*) begin
    p_Result_11_fu_397_p4 = p_Val2_s_reg_143;
    p_Result_11_fu_397_p4[index_assign_cast_fu_361_p1] = |(64'd0);
end

always @ (*) begin
    p_Result_12_fu_482_p4 = p_Val2_3_reg_202;
    p_Result_12_fu_482_p4[index_assign_13_cast_fu_466_p1] = |(p_Repl2_1_fu_478_p1);
end

assign p_Result_13_fu_542_p5 = {{p_Val2_3_reg_202[49:2]}, {tmp_6_fu_534_p3}};

always @ (*) begin
    p_Result_14_fu_588_p4 = p_Val2_4_fu_110;
    p_Result_14_fu_588_p4[index_assign_17_cast_fu_572_p1] = |(p_Repl2_2_fu_584_p1);
end

always @ (*) begin
    p_Result_15_fu_648_p4 = p_Val2_6_reg_234;
    p_Result_15_fu_648_p4[index_assign_19_cast_fu_632_p1] = |(p_Repl2_3_fu_644_p1);
end

always @ (*) begin
    p_Result_4_fu_727_p4 = p_Val2_7_reg_255;
    p_Result_4_fu_727_p4[index_assign_21_cast_fu_699_p1] = |(p_Repl2_5_fu_723_p1);
end

always @ (*) begin
    p_Result_9_fu_339_p4 = p_Val2_s_reg_143;
    p_Result_9_fu_339_p4[32'd49] = |(1'd0);
end

always @ (*) begin
    p_Result_s_fu_307_p4 = x_in_V_reg_120;
    p_Result_s_fu_307_p4[index_assign_11_cast_fu_280_p1] = |(p_Repl2_4_fu_303_p1);
end

assign rem_next_V_fu_609_p2 = (p_Result_13_reg_791 - p_Val2_4_fu_110);

assign sel_tmp1_fu_415_p2 = (tmp_fu_333_p2 ^ 1'd1);

assign sel_tmp2_fu_421_p2 = (tmp_1_fu_349_p2 & sel_tmp1_fu_415_p2);

assign sel_tmp_fu_407_p3 = ((tmp_fu_333_p2[0:0] === 1'b1) ? p_Result_9_fu_339_p4 : p_Result_11_fu_397_p4);

always @ (*) begin
    sqrt_int_V_fu_677_p4 = p_Val2_6_reg_234;
    sqrt_int_V_fu_677_p4[32'd0] = |(not_Result_s_fu_671_p2);
end

assign tmp_10_fu_440_p3 = i2_0_i_reg_190[32'd5];

assign tmp_11_fu_452_p3 = bvh_d_index_4_reg_212[32'd5];

assign tmp_12_fu_715_p3 = data_x_outp_V_reg_166[index_assign_21_cast_fu_699_p1];

assign tmp_15_fu_518_p3 = p_Val2_s_reg_143[index_assign_15_cast_fu_514_p1];

assign tmp_16_fu_526_p3 = p_Val2_s_reg_143[index_assign_16_cast_fu_504_p1];

assign tmp_17_fu_470_p3 = p_Val2_3_reg_202[index_assign_14_cast_fu_448_p1];

assign tmp_19_fu_558_p3 = bvh_d_index_9_reg_223[32'd5];

assign tmp_1_fu_349_p2 = ((i1_0_i_reg_155 < 6'd49) ? 1'b1 : 1'b0);

assign tmp_20_fu_576_p3 = data_x_outp_V_reg_166[index_assign_18_cast_fu_554_p1];

assign tmp_22_fu_618_p3 = bvh_d_index_11_reg_244[32'd5];

assign tmp_23_fu_664_p3 = rem_next_V_reg_805[32'd25];

assign tmp_25_fu_636_p3 = p_Val2_6_reg_234[index_assign_20_cast_fu_614_p1];

assign tmp_2_fu_296_p3 = inputData_in_V_read[index_assign_11_cast_fu_280_p1];

assign tmp_6_fu_534_p3 = {{tmp_15_fu_518_p3}, {tmp_16_fu_526_p3}};

assign tmp_7_fu_375_p3 = x_in_V_reg_120[index_assign_12_cast_fu_371_p1];

assign tmp_fu_333_p2 = ((i1_0_i_reg_155 == 6'd0) ? 1'b1 : 1'b0);

endmodule //cordic_base
