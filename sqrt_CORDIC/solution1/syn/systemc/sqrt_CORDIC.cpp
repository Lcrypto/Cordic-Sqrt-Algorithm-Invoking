// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sqrt_CORDIC.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sqrt_CORDIC::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sqrt_CORDIC::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> sqrt_CORDIC::ap_ST_fsm_state1 = "1";
const sc_lv<6> sqrt_CORDIC::ap_ST_fsm_state2 = "10";
const sc_lv<6> sqrt_CORDIC::ap_ST_fsm_state3 = "100";
const sc_lv<6> sqrt_CORDIC::ap_ST_fsm_state4 = "1000";
const sc_lv<6> sqrt_CORDIC::ap_ST_fsm_state5 = "10000";
const sc_lv<6> sqrt_CORDIC::ap_ST_fsm_state6 = "100000";
const sc_lv<32> sqrt_CORDIC::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> sqrt_CORDIC::ap_const_lv32_5 = "101";
const sc_lv<32> sqrt_CORDIC::ap_const_lv32_1 = "1";
const sc_lv<1> sqrt_CORDIC::ap_const_lv1_0 = "0";
const sc_lv<32> sqrt_CORDIC::ap_const_lv32_2 = "10";
const sc_lv<32> sqrt_CORDIC::ap_const_lv32_3 = "11";
const sc_lv<32> sqrt_CORDIC::ap_const_lv32_4 = "100";
const sc_lv<10> sqrt_CORDIC::ap_const_lv10_0 = "0000000000";
const sc_lv<10> sqrt_CORDIC::ap_const_lv10_3E8 = "1111101000";
const sc_lv<10> sqrt_CORDIC::ap_const_lv10_1 = "1";
const sc_lv<47> sqrt_CORDIC::ap_const_lv47_0 = "00000000000000000000000000000000000000000000000";
const sc_lv<25> sqrt_CORDIC::ap_const_lv25_0 = "0000000000000000000000000";
const sc_lv<32> sqrt_CORDIC::ap_const_lv32_17 = "10111";
const sc_lv<32> sqrt_CORDIC::ap_const_lv32_1E = "11110";
const sc_lv<8> sqrt_CORDIC::ap_const_lv8_E8 = "11101000";
const sc_lv<1> sqrt_CORDIC::ap_const_lv1_1 = "1";
const bool sqrt_CORDIC::ap_const_boolean_1 = true;

sqrt_CORDIC::sqrt_CORDIC(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_cordic_base_fu_66 = new cordic_base("grp_cordic_base_fu_66");
    grp_cordic_base_fu_66->ap_clk(ap_clk);
    grp_cordic_base_fu_66->ap_rst(ap_rst);
    grp_cordic_base_fu_66->ap_start(grp_cordic_base_fu_66_ap_start);
    grp_cordic_base_fu_66->ap_done(grp_cordic_base_fu_66_ap_done);
    grp_cordic_base_fu_66->ap_idle(grp_cordic_base_fu_66_ap_idle);
    grp_cordic_base_fu_66->ap_ready(grp_cordic_base_fu_66_ap_ready);
    grp_cordic_base_fu_66->inputData_in_V_read(input_in_V_reg_159);
    grp_cordic_base_fu_66->ap_return(grp_cordic_base_fu_66_ap_return);
    sqrt_CORDIC_uitofbkb_U2 = new sqrt_CORDIC_uitofbkb<1,2,32,32>("sqrt_CORDIC_uitofbkb_U2");
    sqrt_CORDIC_uitofbkb_U2->clk(ap_clk);
    sqrt_CORDIC_uitofbkb_U2->reset(ap_rst);
    sqrt_CORDIC_uitofbkb_U2->din0(grp_fu_71_p0);
    sqrt_CORDIC_uitofbkb_U2->ce(ap_var_for_const0);
    sqrt_CORDIC_uitofbkb_U2->dout(grp_fu_71_p1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_74_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_74_p2 );

    SC_METHOD(thread_dp_fu_139_p1);
    sensitive << ( p_Result_s_fu_128_p5 );

    SC_METHOD(thread_exitcond_fu_74_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_55 );

    SC_METHOD(thread_exp_V_2_fu_123_p2);
    sensitive << ( exp_V_reg_184 );

    SC_METHOD(thread_grp_cordic_base_fu_66_ap_start);
    sensitive << ( ap_reg_grp_cordic_base_fu_66_ap_start );

    SC_METHOD(thread_grp_fu_71_p0);
    sensitive << ( output_out_V_reg_164 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_i_1_fu_80_p2);
    sensitive << ( i_reg_55 );

    SC_METHOD(thread_input_in_V_fu_90_p3);
    sensitive << ( tmp_fu_86_p1 );

    SC_METHOD(thread_p_Result_s_fu_128_p5);
    sensitive << ( res_V_1_reg_179 );
    sensitive << ( exp_V_2_fu_123_p2 );

    SC_METHOD(thread_res_V_1_fu_109_p1);
    sensitive << ( grp_fu_71_p1 );

    SC_METHOD(thread_returnValue_blk_n);
    sensitive << ( returnValue_full_n );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_returnValue_din);
    sensitive << ( returnValue_full_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_3_reg_169 );
    sensitive << ( dp_fu_139_p1 );

    SC_METHOD(thread_returnValue_write);
    sensitive << ( returnValue_full_n );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_tmp_3_fu_99_p2);
    sensitive << ( grp_cordic_base_fu_66_ap_return );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_cordic_base_fu_66_ap_done );

    SC_METHOD(thread_tmp_fu_86_p1);
    sensitive << ( i_1_fu_80_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( returnValue_full_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_74_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_cordic_base_fu_66_ap_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000001";
    ap_reg_grp_cordic_base_fu_66_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sqrt_CORDIC_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, returnValue_din, "(port)returnValue_din");
    sc_trace(mVcdFile, returnValue_full_n, "(port)returnValue_full_n");
    sc_trace(mVcdFile, returnValue_write, "(port)returnValue_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, returnValue_blk_n, "returnValue_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, i_1_fu_80_p2, "i_1_fu_80_p2");
    sc_trace(mVcdFile, i_1_reg_154, "i_1_reg_154");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, input_in_V_fu_90_p3, "input_in_V_fu_90_p3");
    sc_trace(mVcdFile, input_in_V_reg_159, "input_in_V_reg_159");
    sc_trace(mVcdFile, exitcond_fu_74_p2, "exitcond_fu_74_p2");
    sc_trace(mVcdFile, grp_cordic_base_fu_66_ap_return, "grp_cordic_base_fu_66_ap_return");
    sc_trace(mVcdFile, output_out_V_reg_164, "output_out_V_reg_164");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, grp_cordic_base_fu_66_ap_done, "grp_cordic_base_fu_66_ap_done");
    sc_trace(mVcdFile, tmp_3_fu_99_p2, "tmp_3_fu_99_p2");
    sc_trace(mVcdFile, tmp_3_reg_169, "tmp_3_reg_169");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, res_V_1_fu_109_p1, "res_V_1_fu_109_p1");
    sc_trace(mVcdFile, res_V_1_reg_179, "res_V_1_reg_179");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, exp_V_reg_184, "exp_V_reg_184");
    sc_trace(mVcdFile, grp_cordic_base_fu_66_ap_start, "grp_cordic_base_fu_66_ap_start");
    sc_trace(mVcdFile, grp_cordic_base_fu_66_ap_idle, "grp_cordic_base_fu_66_ap_idle");
    sc_trace(mVcdFile, grp_cordic_base_fu_66_ap_ready, "grp_cordic_base_fu_66_ap_ready");
    sc_trace(mVcdFile, i_reg_55, "i_reg_55");
    sc_trace(mVcdFile, ap_reg_grp_cordic_base_fu_66_ap_start, "ap_reg_grp_cordic_base_fu_66_ap_start");
    sc_trace(mVcdFile, grp_fu_71_p0, "grp_fu_71_p0");
    sc_trace(mVcdFile, tmp_fu_86_p1, "tmp_fu_86_p1");
    sc_trace(mVcdFile, grp_fu_71_p1, "grp_fu_71_p1");
    sc_trace(mVcdFile, exp_V_2_fu_123_p2, "exp_V_2_fu_123_p2");
    sc_trace(mVcdFile, p_Result_s_fu_128_p5, "p_Result_s_fu_128_p5");
    sc_trace(mVcdFile, dp_fu_139_p1, "dp_fu_139_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("sqrt_CORDIC.hdltvin.dat");
    mHdltvoutHandle.open("sqrt_CORDIC.hdltvout.dat");
}

sqrt_CORDIC::~sqrt_CORDIC() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_cordic_base_fu_66;
    delete sqrt_CORDIC_uitofbkb_U2;
}

void sqrt_CORDIC::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void sqrt_CORDIC::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_cordic_base_fu_66_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(exitcond_fu_74_p2.read(), ap_const_lv1_0))) {
            ap_reg_grp_cordic_base_fu_66_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_cordic_base_fu_66_ap_ready.read())) {
            ap_reg_grp_cordic_base_fu_66_ap_start = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(returnValue_full_n.read(), ap_const_logic_1))) {
        i_reg_55 = i_1_reg_154.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_55 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_reg_169.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        exp_V_reg_184 = res_V_1_fu_109_p1.read().range(30, 23);
        res_V_1_reg_179 = res_V_1_fu_109_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_154 = i_1_fu_80_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_74_p2.read(), ap_const_lv1_0))) {
        input_in_V_reg_159 = input_in_V_fu_90_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(grp_cordic_base_fu_66_ap_done.read(), ap_const_logic_1))) {
        output_out_V_reg_164 = grp_cordic_base_fu_66_ap_return.read();
        tmp_3_reg_169 = tmp_3_fu_99_p2.read();
    }
}

void sqrt_CORDIC::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sqrt_CORDIC::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sqrt_CORDIC::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sqrt_CORDIC::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void sqrt_CORDIC::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void sqrt_CORDIC::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void sqrt_CORDIC::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_74_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sqrt_CORDIC::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sqrt_CORDIC::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_74_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sqrt_CORDIC::thread_dp_fu_139_p1() {
    dp_fu_139_p1 = p_Result_s_fu_128_p5.read();
}

void sqrt_CORDIC::thread_exitcond_fu_74_p2() {
    exitcond_fu_74_p2 = (!i_reg_55.read().is_01() || !ap_const_lv10_3E8.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_55.read() == ap_const_lv10_3E8);
}

void sqrt_CORDIC::thread_exp_V_2_fu_123_p2() {
    exp_V_2_fu_123_p2 = (!ap_const_lv8_E8.is_01() || !exp_V_reg_184.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_E8) + sc_biguint<8>(exp_V_reg_184.read()));
}

void sqrt_CORDIC::thread_grp_cordic_base_fu_66_ap_start() {
    grp_cordic_base_fu_66_ap_start = ap_reg_grp_cordic_base_fu_66_ap_start.read();
}

void sqrt_CORDIC::thread_grp_fu_71_p0() {
    grp_fu_71_p0 = esl_zext<32,25>(output_out_V_reg_164.read());
}

void sqrt_CORDIC::thread_i_1_fu_80_p2() {
    i_1_fu_80_p2 = (!i_reg_55.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_reg_55.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void sqrt_CORDIC::thread_input_in_V_fu_90_p3() {
    input_in_V_fu_90_p3 = esl_concat<1,47>(tmp_fu_86_p1.read(), ap_const_lv47_0);
}

void sqrt_CORDIC::thread_p_Result_s_fu_128_p5() {
    p_Result_s_fu_128_p5 = esl_partset<32,32,8,32,32>(res_V_1_reg_179.read(), exp_V_2_fu_123_p2.read(), ap_const_lv32_17, ap_const_lv32_1E);
}

void sqrt_CORDIC::thread_res_V_1_fu_109_p1() {
    res_V_1_fu_109_p1 = grp_fu_71_p1.read();
}

void sqrt_CORDIC::thread_returnValue_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        returnValue_blk_n = returnValue_full_n.read();
    } else {
        returnValue_blk_n = ap_const_logic_1;
    }
}

void sqrt_CORDIC::thread_returnValue_din() {
    returnValue_din = (!tmp_3_reg_169.read()[0].is_01())? sc_lv<32>(): ((tmp_3_reg_169.read()[0].to_bool())? ap_const_lv32_0: dp_fu_139_p1.read());
}

void sqrt_CORDIC::thread_returnValue_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(returnValue_full_n.read(), ap_const_logic_1))) {
        returnValue_write = ap_const_logic_1;
    } else {
        returnValue_write = ap_const_logic_0;
    }
}

void sqrt_CORDIC::thread_tmp_3_fu_99_p2() {
    tmp_3_fu_99_p2 = (!grp_cordic_base_fu_66_ap_return.read().is_01() || !ap_const_lv25_0.is_01())? sc_lv<1>(): sc_lv<1>(grp_cordic_base_fu_66_ap_return.read() == ap_const_lv25_0);
}

void sqrt_CORDIC::thread_tmp_fu_86_p1() {
    tmp_fu_86_p1 = i_1_fu_80_p2.read().range(1-1, 0);
}

void sqrt_CORDIC::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_74_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(grp_cordic_base_fu_66_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(returnValue_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

void sqrt_CORDIC::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"returnValue_din\" :  \"" << returnValue_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"returnValue_full_n\" :  \"" << returnValue_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"returnValue_write\" :  \"" << returnValue_write.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

